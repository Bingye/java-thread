1bit 0/1
1byte=1B=8bit(00000001)
1024B=1KB
1024MB=1MB
1024MB=1G

保证一致性；

其他的线程处于什么状态（等待队列）
1、又自己来循环查看状态（自旋锁CAS）也叫轻量级锁；
2、OS来调度重量级锁；

轻量级锁一定比重量级锁效率高么？
1、10000万个人等待自旋，则不会高。
2、os将等待线程进入队列。
所以线程不多的情况下，重量级锁比轻量级锁高，反之则不高

synchronized 最早的版本直接使用重量级锁，效率低

锁的升级过程，new 对象 ——》 偏向锁（不是锁）——》轻量级锁CAS ——》 重量级锁

轻量级锁CAS，ABA问题，解决方式 比对交换 + 版本号 ，汇编lock compareAndSwap

独占锁是一种悲观锁，synchronized就是一种独占锁

CAS(Compare And Swap)是一种有名的无锁算法。CAS算法是乐观锁的一种实现。所谓乐观锁就是每次不加锁,假设没有冲突而去完成某项操作;如果发生冲突了那就去重试，直到成功为止。
无锁的概念是没有重量级锁，并不是没有锁。

注:synchronized和ReentrantLock都是悲观锁。

volatile 内存可见性


CPU一次性读取64B内存(一个缓存行)块到高速缓存中

高速缓存有L1/L2/L3

多核CPU怎么保证数据一致性。cpu的MESI（）缓存一致性协议


指令重排序、happens-before、内存屏障

指令重排序，CPU为什么做指令重排序呢？提高CPU的运算效率。
什么是：就是把指令不按照代码看上去的顺序执行，但是对结果没有影响（结果一致性）

内存屏障Memory Barrier：是一个CPU指令
store/store
load/load
store/load
load/store
内存屏障正是通过阻止屏障两边的指令重排序来避免编译器和硬件的不正确优化而提出的一种解决办法
硬件层的内存屏障
Intel硬件提供了一系列的内存屏障，主要有： 
1. lfence，是一种Load Barrier 读屏障 
2. sfence, 是一种Store Barrier 写屏障 
3. mfence, 是一种全能型的屏障，具备ifence和sfence的能力 
4. Lock前缀，Lock不是一种内存屏障，但是它能完成类似内存屏障的功能。Lock会对CPU总线和高速缓存加锁，可以理解为CPU指令级的一种锁。
它后面可以跟ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG等指令。

Synchronized使用了StoreStore屏障
volatile使用了StoreLoad屏障，1、强制将结果写入主存，并强制刷新到缓存中，2、使用lock addl，防止指令重排序。
lock前缀指令相当于一个内存屏障（也称内存栅栏），内存屏障主要提供3个功能：
1、 确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；
2、 强制将对缓存的修改操作立即写入主存，利用缓存一致性机制，并且缓存一致性机制会阻止同时修改由两个以上CPU缓存的内存区域数据；
3、如果是写操作，它会导致其他CPU中对应的缓存行无效。
https://blog.csdn.net/breakout_alex/article/details/94379895

volatile为什么不能保证原子性
原子操作是一些列的操作要么全做，要么全不做，而volatile 是一种弱的同步机制，只能确保共享变量的更新操作及时被其他线程看到，以最常用的i++来说吧，包含3个步骤
1，从内存读取i当前的值 2，加1 变成 3，把修改后的值刷新到内存，volatile无法保证这三个不被打断的执行完毕，如果在刷新到内存之前有中断，此时被其他线程修改了，之前的值就无效了
volatile的适用场景
volatile是在synchronized性能低下的时候提出的。如今synchronized的效率已经大幅提升，所以volatile存在的意义不大。


线程安全保证两个：①可见性。②原子性。
volatile，没有使用锁的机制，只能保证共享变量可见性，并不能保证原子性
synchronized，使用了锁的机制，既能保证共享变量的可见性，也能保证同步块中的代码的原子性。

Java内存模型(简称JMM)

CountDownLatch和CyclicBarrier区别：
1.countDownLatch是一个计数器，线程完成一个记录一个，计数器递减，只能只用一次
2.CyclicBarrier的计数器更像一个阀门，需要所有线程都到达，然后继续执行，计数器递增，提供reset功能，可以多次使用

